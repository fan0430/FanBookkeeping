import React, { useState, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  Modal,
  TextInput,
  Dimensions,
  Platform,
  Linking,
  ScrollView,
} from 'react-native';
import { RNCamera } from 'react-native-camera';
import { check, request, PERMISSIONS, RESULTS } from 'react-native-permissions';
import Clipboard from '@react-native-clipboard/clipboard';
import { NavigationProps, ParsedBarcode } from '../types';
import { parseBarcode } from '../utils/productParser';
import { useGoogleAuth } from '../context/GoogleAuthContext';
import { googleSheetsService } from '../utils/googleSheetsService';
import { diagnoseGoogleAuth, testSignInWithDiagnosis, getQuickFixSuggestions, forceSignIn, checkOAuthConsentScreen } from '../utils/googleAuthTest';
import { 
  getUserSpreadsheetId, 
  saveUserSpreadsheetId, 
  getUserSpreadsheetInfo,
  updateUserSpreadsheetLastUsed,
  UserSpreadsheet 
} from '../utils/spreadsheetStorage';
import { isReleaseMode, isDebugMode, getEnvironmentInfo, logEnvironmentInfo } from '../utils/helpers';
import { testApiConnection, logApiEnvironmentInfo } from '../utils/apiConfig';

const { width: screenWidth } = Dimensions.get('window');

const POSSystemScreen: React.FC<NavigationProps> = ({ navigation }) => {
  const [scannedData, setScannedData] = useState<string>('');
  const [parsedProduct, setParsedProduct] = useState<ParsedBarcode | null>(null);
  const [showResultModal, setShowResultModal] = useState(false);
  const [showCameraModal, setShowCameraModal] = useState(false);
  const [manualInput, setManualInput] = useState('');
  const [spreadsheetId, setSpreadsheetId] = useState<string>('');
  const [spreadsheetInfo, setSpreadsheetInfo] = useState<UserSpreadsheet | null>(null);

  const { authState, signIn, signOut, getAccessToken } = useGoogleAuth();

  // Áï∂ÁôªÂÖ•ÁãÄÊÖãÊîπËÆäÊôÇËºâÂÖ•Ë©¶ÁÆóË°®Ë≥áË®ä
  React.useEffect(() => {
    if (authState.isSignedIn) {
      loadUserSpreadsheetInfo();
    } else {
      setSpreadsheetId('');
      setSpreadsheetInfo(null);
    }
  }, [authState.isSignedIn, authState.user?.id]);

  // ËºâÂÖ•Áî®Êà∂ÁöÑË©¶ÁÆóË°®Ë≥áË®ä
  const loadUserSpreadsheetInfo = async () => {
    if (!authState.isSignedIn || !authState.user?.id) {
      setSpreadsheetId('');
      setSpreadsheetInfo(null);
      return;
    }

    try {
      const savedSpreadsheetId = await getUserSpreadsheetId(authState.user.id);
      const savedSpreadsheetInfo = await getUserSpreadsheetInfo(authState.user.id);
      
      if (savedSpreadsheetId && savedSpreadsheetInfo) {
        setSpreadsheetId(savedSpreadsheetId);
        setSpreadsheetInfo(savedSpreadsheetInfo);
        console.log('ËºâÂÖ•Áî®Êà∂Ë©¶ÁÆóË°®Ë≥áË®ä:', savedSpreadsheetInfo);
      } else {
        setSpreadsheetId('');
        setSpreadsheetInfo(null);
      }
    } catch (error) {
      console.error('ËºâÂÖ•Áî®Êà∂Ë©¶ÁÆóË°®Ë≥áË®äÂ§±Êïó:', error);
      setSpreadsheetId('');
      setSpreadsheetInfo(null);
    }
  };

  // Ê™¢Êü•Áõ∏Ê©üÊ¨äÈôê
  const checkCameraPermission = async () => {
    try {
      const permission = Platform.OS === 'ios'
        ? PERMISSIONS.IOS.CAMERA
        : PERMISSIONS.ANDROID.CAMERA;

      const result = await check(permission);

      switch (result) {
        case RESULTS.UNAVAILABLE:
          Alert.alert('ÈåØË™§', 'Ê≠§Ë®≠ÂÇô‰∏çÊîØÊè¥Áõ∏Ê©üÂäüËÉΩ');
          return false;
        case RESULTS.DENIED:
          const requestResult = await request(permission);
          if (requestResult === RESULTS.GRANTED) {
            return true;
          } else {
            Alert.alert('Ê¨äÈôêË¢´ÊãíÁµï', 'ÈúÄË¶ÅÁõ∏Ê©üÊ¨äÈôêÊâçËÉΩ‰ΩøÁî®ÊéÉÊèèÂäüËÉΩ');
            return false;
          }
        case RESULTS.LIMITED:
        case RESULTS.GRANTED:
          return true;
        case RESULTS.BLOCKED:
          Alert.alert(
            'Ê¨äÈôêË¢´ÈòªÊìã',
            'Áõ∏Ê©üÊ¨äÈôêÂ∑≤Ë¢´ÈòªÊìãÔºåË´ãÂú®Ë®≠ÂÆö‰∏≠ÈñãÂïüÁõ∏Ê©üÊ¨äÈôê',
            [
              { text: 'ÂèñÊ∂à', style: 'cancel' },
              {
                text: 'ÈñãÂïüË®≠ÂÆö', onPress: () => {
                  Linking.openSettings();
                }
              }
            ]
          );
          return false;
        default:
          return false;
      }
    } catch (error) {
      console.error('Ê¨äÈôêÊ™¢Êü•ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'Ê™¢Êü•Áõ∏Ê©üÊ¨äÈôêÊôÇÁôºÁîüÈåØË™§');
      return false;
    }
  };

  const handleManualInput = () => {
    if (!manualInput.trim()) {
      Alert.alert('ÈåØË™§', 'Ë´ãËº∏ÂÖ•Ê¢ùÁ¢ºÂÖßÂÆπ');
      return;
    }
    const parsed = parseBarcode(manualInput);
    setScannedData(manualInput);
    setParsedProduct(parsed);
    setShowResultModal(true);
  };

  const handleScanAgain = () => {
    setScannedData('');
    setParsedProduct(null);
    setManualInput('');
    setShowResultModal(false);
    setShowCameraModal(false);
  };

  const handleCameraScan = async () => {
    const hasPermission = await checkCameraPermission();
    if (hasPermission) {
      setShowCameraModal(true);
    }
  };

  const onBarcodeRead = (event: any) => {
    console.log('Barcode read event:', event);
    const { data } = event;
    if (data) {
      const parsed = parseBarcode(data);
      setScannedData(data);
      setParsedProduct(parsed);
      setShowCameraModal(false);
      setShowResultModal(true);
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      await signIn();
      const token = await getAccessToken();
      if (token) {
        googleSheetsService.setAccessToken(token);
      }
      
      // ÁôªÂÖ•ÊàêÂäüÂæåËºâÂÖ•Áî®Êà∂ÁöÑË©¶ÁÆóË°®Ë≥áË®ä
      await loadUserSpreadsheetInfo();
      
      Alert.alert('ÊàêÂäü', 'GoogleÁôªÂÖ•ÊàêÂäüÔºÅ');
    } catch (error) {
      console.error('GoogleÁôªÂÖ•ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'GoogleÁôªÂÖ•Â§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  // Êñ∞Â¢ûÔºöË®∫Êñ∑ Google ÁôªÂÖ•ÂïèÈ°å
  const handleDiagnoseGoogleAuth = async () => {
    try {
      Alert.alert('Ë®∫Êñ∑‰∏≠', 'Ê≠£Âú®Ê™¢Êü• Google ÁôªÂÖ•Ë®≠ÂÆö...');
      
      const diagnosis = await diagnoseGoogleAuth();
      console.log('Ë®∫Êñ∑ÁµêÊûú:', diagnosis);
      
      let message = 'Ë®∫Êñ∑ÁµêÊûú:\n\n';
      message += `Play Services: ${diagnosis.playServices ? '‚úÖ ÂèØÁî®' : '‚ùå ‰∏çÂèØÁî®'}\n`;
      message += `Áï∂ÂâçÁî®Êà∂: ${diagnosis.currentUser ? '‚úÖ Â∑≤ÁôªÂÖ•' : '‚ùå Êú™ÁôªÂÖ•'}\n`;
      message += `Ê¨äÊùñ: ${diagnosis.tokens ? '‚úÖ ÊúâÊïà' : '‚ùå ÁÑ°Êïà'}\n`;
      
      if (diagnosis.errors.length > 0) {
        message += `\n‚ùå ÈåØË™§:\n${diagnosis.errors.join('\n')}`;
      }
      
      if (diagnosis.suggestions.length > 0) {
        message += `\n\nüí° Âª∫Ë≠∞:\n${diagnosis.suggestions.join('\n')}`;
      }
      
      // Â¶ÇÊûúË®äÊÅØÂ§™Èï∑ÔºåÂàÜÊÆµÈ°ØÁ§∫
      if (message.length > 1000) {
        const parts = message.split('\n\n');
        for (let i = 0; i < parts.length; i++) {
          setTimeout(() => {
            Alert.alert(
              i === 0 ? 'Ë®∫Êñ∑ÁµêÊûú (1/2)' : 'Ë®∫Êñ∑ÁµêÊûú (2/2)',
              parts[i],
              [{ text: 'Á¢∫ÂÆö', onPress: () => {} }]
            );
          }, i * 100);
        }
      } else {
        Alert.alert('Ë®∫Êñ∑ÂÆåÊàê', message);
      }
    } catch (error) {
      console.error('Ë®∫Êñ∑ÈåØË™§:', error);
      Alert.alert('Ë®∫Êñ∑Â§±Êïó', `Ë®∫Êñ∑ÈÅéÁ®ãÁôºÁîüÈåØË™§: ${error}`);
    }
  };

  // Êñ∞Â¢ûÔºöÊ∏¨Ë©¶ÁôªÂÖ•ÊµÅÁ®ã
  const handleTestSignIn = async () => {
    try {
      Alert.alert('Ê∏¨Ë©¶‰∏≠', 'Ê≠£Âú®Ê∏¨Ë©¶ Google ÁôªÂÖ•ÊµÅÁ®ã...');
      
      const result = await testSignInWithDiagnosis();
      console.log('Ê∏¨Ë©¶ÁµêÊûú:', result);
      
      let message = `Ê∏¨Ë©¶ÁµêÊûú: ${result.success ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Êïó'}\n\n`;
      message += `Ë®äÊÅØ: ${result.message}\n\n`;
      
      if (result.diagnosis) {
        message += `Ë®∫Êñ∑Ë≥áË®ä:\n`;
        message += `Play Services: ${result.diagnosis.playServices ? '‚úÖ' : '‚ùå'}\n`;
        message += `Áï∂ÂâçÁî®Êà∂: ${result.diagnosis.currentUser ? '‚úÖ' : '‚ùå'}\n`;
        message += `Ê¨äÊùñ: ${result.diagnosis.tokens ? '‚úÖ' : '‚ùå'}\n`;
        
        if (result.diagnosis.errors.length > 0) {
          message += `\nÈåØË™§:\n${result.diagnosis.errors.join('\n')}`;
        }
      }
      
      // Â¶ÇÊûúÊòØÈåØË™§‰ª£Á¢º 10ÔºåÊèê‰æõÂø´ÈÄü‰øÆÂæ©Âª∫Ë≠∞
      if (!result.success && result.message.includes('ÈåØË™§‰ª£Á¢º: 10')) {
        const quickFix = getQuickFixSuggestions(10);
        message += `\n\nüîß Âø´ÈÄü‰øÆÂæ©:\n${quickFix.join('\n')}`;
      }
      
      Alert.alert('Ê∏¨Ë©¶ÂÆåÊàê', message);
    } catch (error) {
      console.error('Ê∏¨Ë©¶ÈåØË™§:', error);
      Alert.alert('Ê∏¨Ë©¶Â§±Êïó', `Ê∏¨Ë©¶ÈÅéÁ®ãÁôºÁîüÈåØË™§: ${error}`);
    }
  };

  // Êñ∞Â¢ûÔºöÂº∑Âà∂ÁôªÂÖ•
  const handleForceSignIn = async () => {
    try {
      Alert.alert('Âº∑Âà∂ÁôªÂÖ•‰∏≠', 'Ê≠£Âú®Ê∏ÖÈô§Âø´Âèñ‰∏¶ÈáçÊñ∞ÁôªÂÖ•...');
      
      const result = await forceSignIn();
      console.log('Âº∑Âà∂ÁôªÂÖ•ÁµêÊûú:', result);
      
      let message = `Âº∑Âà∂ÁôªÂÖ•ÁµêÊûú: ${result.success ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Êïó'}\n\n`;
      message += `Ë®äÊÅØ: ${result.message}`;
      
      if (result.success) {
        message += '\n\nüéâ ÁôªÂÖ•ÊàêÂäüÔºÅÁèæÂú®ÂèØ‰ª•Ê≠£Â∏∏‰ΩøÁî® Google ÂäüËÉΩ‰∫Ü„ÄÇ';
      } else {
        message += '\n\nüí° Â¶ÇÊûúÈÇÑÊòØÂ§±ÊïóÔºåË´ãÂòóË©¶Ôºö';
        message += '\n1. Ê∏ÖÈô§ÊáâÁî®Á®ãÂºèË≥áÊñô';
        message += '\n2. ÈáçÊñ∞ÂÆâË£ùÊáâÁî®Á®ãÂºè';
        message += '\n3. Ê™¢Êü• Google Cloud Console Ë®≠ÂÆö';
      }
      
      Alert.alert('Âº∑Âà∂ÁôªÂÖ•ÂÆåÊàê', message);
    } catch (error) {
      console.error('Âº∑Âà∂ÁôªÂÖ•ÈåØË™§:', error);
      Alert.alert('Âº∑Âà∂ÁôªÂÖ•Â§±Êïó', `Âº∑Âà∂ÁôªÂÖ•ÈÅéÁ®ãÁôºÁîüÈåØË™§: ${error}`);
    }
  };

  // Êñ∞Â¢ûÔºöÊ™¢Êü• OAuth Ë®≠ÂÆö
  const handleCheckOAuth = async () => {
    try {
      Alert.alert('Ê™¢Êü•‰∏≠', 'Ê≠£Âú®Ê™¢Êü• OAuth ÂêåÊÑèÁï´Èù¢Ë®≠ÂÆö...');
      
      const result = await checkOAuthConsentScreen();
      console.log('OAuth Ê™¢Êü•ÁµêÊûú:', result);
      
      let message = `OAuth Ê™¢Êü•ÁµêÊûú: ${result.status === 'success' ? '‚úÖ Ê≠£Â∏∏' : '‚ùå ÊúâÂïèÈ°å'}\n\n`;
      message += `Ë®äÊÅØ: ${result.message}`;
      
      if (result.status === 'error' && result.suggestions) {
        message += '\n\nüîß Âª∫Ë≠∞‰øÆÂæ©Ê≠•È©ü:\n';
        message += result.suggestions.join('\n');
      }
      
      Alert.alert('OAuth Ê™¢Êü•ÂÆåÊàê', message);
    } catch (error) {
      console.error('OAuth Ê™¢Êü•ÈåØË™§:', error);
      Alert.alert('OAuth Ê™¢Êü•Â§±Êïó', `Ê™¢Êü•ÈÅéÁ®ãÁôºÁîüÈåØË™§: ${error}`);
    }
  };

  // Êñ∞Â¢ûÔºöÈ°ØÁ§∫Áí∞Â¢ÉË≥áË®ä
  const handleShowEnvironmentInfo = () => {
    const envInfo = getEnvironmentInfo();
    logEnvironmentInfo();
    logApiEnvironmentInfo();
    
    let message = `üåç Áí∞Â¢ÉË≥áË®ä\n\n`;
    message += `Ê®°Âºè: ${envInfo.isDebug ? 'Debug' : 'Release'}\n`;
    message += `Âπ≥Âè∞: ${envInfo.platform}\n`;
    message += `ÁâàÊú¨: ${envInfo.version}\n`;
    message += `Ê®°Êì¨Âô®: ${envInfo.isSimulator ? 'ÊòØ' : 'Âê¶'}\n\n`;
    
    if (isReleaseMode()) {
      message += `üì± Release Ê®°ÂºèÊ≥®ÊÑè‰∫ãÈ†Ö:\n`;
      message += `‚Ä¢ Â∑≤ÂïüÁî®È°çÂ§ñÁöÑ HTTP headers\n`;
      message += `‚Ä¢ Â∑≤Ë®≠ÂÆö 30 ÁßíË´ãÊ±ÇË∂ÖÊôÇ\n`;
      message += `‚Ä¢ Â∑≤Ê∑ªÂä†Âø´ÂèñÊéßÂà∂Ê®ôÈ†≠\n`;
    } else {
      message += `üîß Debug Ê®°Âºè:\n`;
      message += `‚Ä¢ ‰ΩøÁî®Âü∫Êú¨ headers\n`;
      message += `‚Ä¢ Â∑≤Ë®≠ÂÆö 30 ÁßíË´ãÊ±ÇË∂ÖÊôÇ\n`;
    }
    
    Alert.alert('Áí∞Â¢ÉË≥áË®ä', message);
  };

  // Êñ∞Â¢ûÔºöÊ∏¨Ë©¶ API ÈÄ£Á∑ö
  const handleTestApiConnection = async () => {
    try {
      if (!authState.isSignedIn) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÁôªÂÖ•GoogleÂ∏≥Êà∂');
        return;
      }

      const token = await getAccessToken();
      if (!token) {
        Alert.alert('ÈåØË™§', 'ÁÑ°Ê≥ïÂèñÂæóÂ≠òÂèñÊ¨äÊùñ');
        return;
      }

      Alert.alert('Ê∏¨Ë©¶‰∏≠', 'Ê≠£Âú®Ê∏¨Ë©¶ API ÈÄ£Á∑ö...');
      
      const result = await testApiConnection(token);
      
      let message = `API ÈÄ£Á∑öÊ∏¨Ë©¶ÁµêÊûú: ${result.success ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Êïó'}\n\n`;
      message += `Ë®äÊÅØ: ${result.message}\n`;
      message += `ÁãÄÊÖãÁ¢º: ${result.status || 'N/A'}\n\n`;
      
      if (result.success) {
        message += `üéâ API ÈÄ£Á∑öÊ≠£Â∏∏ÔºÅ\n`;
        message += `Áï∂ÂâçÊ®°Âºè: ${isReleaseMode() ? 'Release' : 'Debug'}\n`;
        message += `Â∑≤ÂïüÁî®È°çÂ§ñ headers: ${isReleaseMode() ? 'ÊòØ' : 'Âê¶'}`;
      } else {
        message += `üí° Âª∫Ë≠∞Ê™¢Êü•:\n`;
        message += `‚Ä¢ Á∂≤Ë∑ØÈÄ£Á∑ö\n`;
        message += `‚Ä¢ Google Â∏≥Êà∂Ê¨äÈôê\n`;
        message += `‚Ä¢ API Ë®≠ÂÆö`;
      }
      
      Alert.alert('API Ê∏¨Ë©¶ÂÆåÊàê', message);
    } catch (error) {
      console.error('API Ê∏¨Ë©¶ÈåØË™§:', error);
      Alert.alert('API Ê∏¨Ë©¶Â§±Êïó', `Ê∏¨Ë©¶ÈÅéÁ®ãÁôºÁîüÈåØË™§: ${error}`);
    }
  };

  const handleGoogleSignOut = async () => {
    try {
      await signOut();
      setSpreadsheetId('');
      setSpreadsheetInfo(null);
      Alert.alert('ÊàêÂäü', 'Â∑≤ÁôªÂá∫GoogleÂ∏≥Êà∂');
    } catch (error) {
      console.error('GoogleÁôªÂá∫ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'ÁôªÂá∫Â§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  // Âª∫Á´ãÊñ∞ÁöÑË©¶ÁÆóË°®
  const handleCreateSpreadsheet = async () => {
    try {
      if (!authState.isSignedIn || !authState.user) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÁôªÂÖ•GoogleÂ∏≥Êà∂');
        return;
      }

      // Â¶ÇÊûúÂ∑≤ÊúâË©¶ÁÆóË°®ÔºåË©¢ÂïèÊòØÂê¶Ë¶ÅÂª∫Á´ãÊñ∞ÁöÑ
      if (spreadsheetId) {
        Alert.alert(
          'Âª∫Á´ãÊñ∞Ë©¶ÁÆóË°®',
          'ÊÇ®Â∑≤Á∂ìÊúâ‰∏ÄÂÄãË©¶ÁÆóË°®‰∫ÜÔºåÁ¢∫ÂÆöË¶ÅÂª∫Á´ãÊñ∞ÁöÑË©¶ÁÆóË°®ÂóéÔºü\n\nÊ≥®ÊÑèÔºöÊñ∞Ë©¶ÁÆóË°®ÊúÉÊõøÊèõÁèæÊúâÁöÑË©¶ÁÆóË°®Ë®≠ÂÆö„ÄÇ',
          [
            { text: 'ÂèñÊ∂à', style: 'cancel' },
            { 
              text: 'Á¢∫ÂÆöÂª∫Á´ã', 
              style: 'destructive',
              onPress: () => createNewSpreadsheet()
            }
          ]
        );
        return;
      }

      await createNewSpreadsheet();
    } catch (error) {
      console.error('Âª∫Á´ãË©¶ÁÆóË°®ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'Âª∫Á´ãË©¶ÁÆóË°®Â§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  // ÂØ¶ÈöõÂª∫Á´ãË©¶ÁÆóË°®ÁöÑÂáΩÊï∏
  const createNewSpreadsheet = async () => {
    try {
      const token = await getAccessToken();
      if (token) {
        googleSheetsService.setAccessToken(token);
      }

      const newSpreadsheetId = await googleSheetsService.createProductSpreadsheet();
      
      // ÂÑ≤Â≠òË©¶ÁÆóË°®Ë≥áË®äÂà∞Êú¨Âú∞
      await saveUserSpreadsheetId(
        authState.user!.id,
        authState.user!.email,
        authState.user!.name,
        newSpreadsheetId,
        'Áî¢ÂìÅÊéÉÊèèË®òÈåÑ'
      );
      
      setSpreadsheetId(newSpreadsheetId);
      
      // ÈáçÊñ∞ËºâÂÖ•Ë©¶ÁÆóË°®Ë≥áË®ä
      await loadUserSpreadsheetInfo();
      
      Alert.alert('ÊàêÂäü', `Â∑≤Âª∫Á´ãÊñ∞ÁöÑË©¶ÁÆóË°®ÔºÅ\nË©¶ÁÆóË°®ID: ${newSpreadsheetId}`);
    } catch (error) {
      console.error('Âª∫Á´ãË©¶ÁÆóË°®ÈåØË™§:', error);
      Alert.alert('ÈåØË™§', 'Âª∫Á´ãË©¶ÁÆóË°®Â§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  // ‰∏äÂÇ≥ÊéÉÊèèË≥áÊñôÂà∞Èõ≤Á´Ø
  const handleUploadToCloud = async () => {
    try {
      if (!authState.isSignedIn) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÁôªÂÖ•GoogleÂ∏≥Êà∂');
        return;
      }

      if (!parsedProduct) {
        Alert.alert('ÈåØË™§', 'Ê≤íÊúâÂèØ‰∏äÂÇ≥ÁöÑÁî¢ÂìÅË≥áÊñô');
        return;
      }

      if (!spreadsheetId) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÂª∫Á´ãË©¶ÁÆóË°®');
        return;
      }

      const token = await getAccessToken();
      if (token) {
        googleSheetsService.setAccessToken(token);
      }

      await googleSheetsService.addProductToSheet(spreadsheetId, parsedProduct);
      
      // Êõ¥Êñ∞Ë©¶ÁÆóË°®ÁöÑÊúÄÂæå‰ΩøÁî®ÊôÇÈñì
      if (authState.user?.id) {
        await updateUserSpreadsheetLastUsed(authState.user.id);
      }
      
      Alert.alert('ÊàêÂäü', 'Áî¢ÂìÅË≥áÊñôÂ∑≤‰∏äÂÇ≥Âà∞Èõ≤Á´ØË©¶ÁÆóË°®ÔºÅ');
    } catch (error) {
      console.error('‰∏äÂÇ≥Ë≥áÊñôÈåØË™§:', error);
      Alert.alert('ÈåØË™§', '‰∏äÂÇ≥Ë≥áÊñôÂ§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  // ‰∏äÂÇ≥Âà∞Èõ≤Á´ØÊåâÈàïÂÖÉ‰ª∂
  const UploadButton = ({ onPress }: { onPress: () => void }) => (
    <TouchableOpacity
      style={styles.uploadButton}
      onPress={onPress}
    >
      <Text style={styles.uploadButtonText}>‚òÅÔ∏è ‰∏äÂÇ≥Âà∞Èõ≤Á´Ø</Text>
    </TouchableOpacity>
  );

  // Ë§áË£ΩË©¶ÁÆóË°®Á∂≤ÂùÄ
  const handleCopySpreadsheetUrl = () => {
    if (!spreadsheetId) {
      Alert.alert('ÈåØË™§', 'Ê≤íÊúâÂèØÁî®ÁöÑË©¶ÁÆóË°®');
      return;
    }

    const url = `https://docs.google.com/spreadsheets/d/${spreadsheetId}`;
    Clipboard.setString(url);
    Alert.alert('ÊàêÂäü', 'Ë©¶ÁÆóË°®Á∂≤ÂùÄÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÁ∞øÔºÅ');
  };

  // È°ØÁ§∫Ë©¶ÁÆóË°®ÁÆ°ÁêÜÈÅ∏È†Ö
  const showSpreadsheetOptions = () => {
    if (!spreadsheetInfo) return;

    Alert.alert(
      'Ë©¶ÁÆóË°®ÁÆ°ÁêÜ',
      `Ë©¶ÁÆóË°®: ${spreadsheetInfo.spreadsheetName}\nID: ${spreadsheetInfo.spreadsheetId}\nÂª∫Á´ãÊôÇÈñì: ${new Date(spreadsheetInfo.createdAt).toLocaleDateString('zh-TW')}`,
      [
        { text: 'ÂèñÊ∂à', style: 'cancel' },
        { 
          text: 'Âª∫Á´ãÊñ∞Ë©¶ÁÆóË°®', 
          onPress: () => handleCreateSpreadsheet()
        },
        { 
          text: 'ÈñãÂïüË©¶ÁÆóË°®', 
          onPress: () => {
            const url = `https://docs.google.com/spreadsheets/d/${spreadsheetInfo.spreadsheetId}`;
            Linking.openURL(url);
          }
        },
        { 
          text: 'Ë§áË£ΩÁ∂≤ÂùÄ', 
          onPress: () => handleCopySpreadsheetUrl()
        }
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.navigate('mainSelect')}
        >
          <Text style={styles.backButtonText}>‚Üê ËøîÂõû</Text>
        </TouchableOpacity>
        <Text style={styles.title}>POSÁ≥ªÁµ±</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView 
        style={styles.content} 
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
      >
        {/* GoogleÁôªÂÖ•ÁãÄÊÖã */}
        <View style={styles.googleAuthSection}>
          <Text style={styles.sectionTitle}>GoogleÂ∏≥Êà∂</Text>
          <Text style={styles.sectionDescription}>
            ÁôªÂÖ•GoogleÂ∏≥Êà∂‰ª•Â≠òÂèñÈõ≤Á´ØË°®Ê†º
          </Text>

          {authState.isSignedIn ? (
            <View style={styles.signedInContainer}>
              <View style={styles.userInfo}>
                <Text style={styles.userName}>{authState.user?.name}</Text>
                <Text style={styles.userEmail}>{authState.user?.email}</Text>
              </View>

              <View style={styles.cloudActions}>
                {!spreadsheetId ? (
                  <TouchableOpacity
                    style={styles.createSheetButton}
                    onPress={handleCreateSpreadsheet}
                  >
                    <Text style={styles.createSheetButtonText}>üìä Âª∫Á´ãË©¶ÁÆóË°®</Text>
                  </TouchableOpacity>
                ) : (
                  <View style={styles.spreadsheetInfo}>
                    <View style={styles.spreadsheetInfoTouchable}>
                      <Text style={styles.spreadsheetLabel}>Ë©¶ÁÆóË°®Ë≥áË®ä (ÈªûÊìäÁÆ°ÁêÜ):</Text>
                      <Text style={styles.spreadsheetName}>{spreadsheetInfo?.spreadsheetName || 'Áî¢ÂìÅÊéÉÊèèË®òÈåÑ'}</Text>
                      <Text style={styles.spreadsheetId}>ID: {spreadsheetId}</Text>
                      
                      {/* Êìç‰ΩúÊåâÈàïÂçÄÂüü - Áõ¥Êé•ÊèíÂÖ•Âú® ID ‰∏ãÈù¢ */}
                      <View style={styles.spreadsheetActions}>
                        <TouchableOpacity
                          style={styles.spreadsheetActionButton}
                          onPress={handleCopySpreadsheetUrl}
                        >
                          <Text style={styles.spreadsheetActionButtonText}>üìã Ë§áË£Ω</Text>
                        </TouchableOpacity>
                        
                        <TouchableOpacity
                          style={styles.spreadsheetActionButton}
                          onPress={() => {
                            const url = `https://docs.google.com/spreadsheets/d/${spreadsheetId}`;
                            Linking.openURL(url);
                          }}
                        >
                          <Text style={styles.spreadsheetActionButtonText}>üîó ÈñãÂïü</Text>
                        </TouchableOpacity>
                      </View>
                      
                      {spreadsheetInfo?.createdAt && (
                        <Text style={styles.spreadsheetDate}>
                          Âª∫Á´ãÊôÇÈñì: {new Date(spreadsheetInfo.createdAt).toLocaleDateString('zh-TW')}
                        </Text>
                      )}
                      <Text style={styles.spreadsheetHint}>ÈªûÊìäÊü•ÁúãÁÆ°ÁêÜÈÅ∏È†Ö</Text>
                    </View>
                  </View>
                )}
              </View>

              <TouchableOpacity
                style={styles.signOutButton}
                onPress={handleGoogleSignOut}
              >
                <Text style={styles.signOutButtonText}>ÁôªÂá∫</Text>
              </TouchableOpacity>
            </View>
          ) : (
            <View>
              <TouchableOpacity
                style={styles.signInButton}
                onPress={handleGoogleSignIn}
              >
                <Text style={styles.signInButtonIcon}>üîê</Text>
                <Text style={styles.signInButtonText}>GoogleÁôªÂÖ•</Text>
              </TouchableOpacity>
              
              {/* Ë®∫Êñ∑ÊåâÈàï */}
              <View style={styles.diagnosticButtons}>
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleDiagnoseGoogleAuth}
                >
                  <Text style={styles.diagnosticButtonText}>üîç Ë®∫Êñ∑ÂïèÈ°å</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleTestSignIn}
                >
                  <Text style={styles.diagnosticButtonText}>üß™ Ê∏¨Ë©¶ÁôªÂÖ•</Text>
                </TouchableOpacity>
              </View>
              
              {/* Âø´ÈÄü‰øÆÂæ©ÊåâÈàï */}
              <View style={styles.diagnosticButtons}>
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleForceSignIn}
                >
                  <Text style={styles.diagnosticButtonText}>‚ö° Âº∑Âà∂ÁôªÂÖ•</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleCheckOAuth}
                >
                  <Text style={styles.diagnosticButtonText}>üîß Ê™¢Êü•Ë®≠ÂÆö</Text>
                </TouchableOpacity>
              </View>
              
              {/* Áí∞Â¢ÉË≥áË®äÊåâÈàï */}
              <View style={styles.diagnosticButtons}>
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleShowEnvironmentInfo}
                >
                  <Text style={styles.diagnosticButtonText}>üåç Áí∞Â¢ÉË≥áË®ä</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.diagnosticButton}
                  onPress={handleTestApiConnection}
                >
                  <Text style={styles.diagnosticButtonText}>üåê API Ê∏¨Ë©¶</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        </View>

        <View style={styles.scanSection}>
          <Text style={styles.sectionTitle}>Ê¢ùÁ¢ºÊéÉÊèè</Text>
          <Text style={styles.sectionDescription}>
            ÈÅ∏ÊìáÊâãÂãïËº∏ÂÖ•Êàñ‰ΩøÁî®Áõ∏Ê©üÊéÉÊèèÂïÜÂìÅÊ¢ùÁ¢º
          </Text>

          <View style={styles.buttonContainer}>
            <TouchableOpacity
              style={[styles.scanButton, styles.manualButton]}
              onPress={() => setShowResultModal(true)}
            >
              <Text style={styles.scanButtonIcon}>‚å®Ô∏è</Text>
              <Text style={styles.scanButtonText}>ÊâãÂãïËº∏ÂÖ•</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.scanButton, styles.cameraButton]}
              onPress={handleCameraScan}
            >
              <Text style={styles.scanButtonIcon}>üì∑</Text>
              <Text style={styles.scanButtonText}>Áõ∏Ê©üÊéÉÊèè</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.managementSection}>
          <Text style={styles.sectionTitle}>Áî¢ÂìÅÁÆ°ÁêÜ</Text>
          <Text style={styles.sectionDescription}>
            Êü•ÁúãÁî¢ÂìÅË≥áË®äÂíåÁîüÊàêÊ¢ùÁ¢º
          </Text>

          <TouchableOpacity
            style={styles.managementButton}
            onPress={() => navigation.navigate('productManagement')}
          >
            <Text style={styles.managementButtonIcon}>üìã</Text>
            <Text style={styles.managementButtonText}>Áî¢ÂìÅÁÆ°ÁêÜ</Text>
          </TouchableOpacity>
        </View>

        {scannedData && parsedProduct && (
          <View style={styles.resultSection}>
            <Text style={styles.sectionTitle}>ÊéÉÊèèÁµêÊûú</Text>
            <View style={styles.resultCard}>
              <Text style={styles.resultLabel}>Ê¢ùÁ¢ºÂÖßÂÆπ:</Text>
              <Text style={styles.resultData}>{scannedData}</Text>
            </View>
            {parsedProduct && (
              <View style={styles.productInfoCard}>
                <Text style={styles.productInfoTitle}>Áî¢ÂìÅË≥áË®ä</Text>
                {parsedProduct.isValid ? (
                  <View style={styles.productInfoTable}>
                    <View style={styles.productInfoRow}>
                      <Text style={styles.productInfoLabel}>Áî¢ÂìÅÈ°ûÂà•:</Text>
                      <Text style={styles.productInfoValue}>{parsedProduct.categoryName} ({parsedProduct.category})</Text>
                    </View>
                    <View style={styles.productInfoRow}>
                      <Text style={styles.productInfoLabel}>Áî¢ÂìÅ‰ª£Á¢º:</Text>
                      <Text style={styles.productInfoValue}>{parsedProduct.productCode}</Text>
                    </View>
                    <View style={styles.productInfoRow}>
                      <Text style={styles.productInfoLabel}>Áî¢ÂìÅÂêçÁ®±:</Text>
                      <Text style={styles.productInfoValue}>{parsedProduct.productName}</Text>
                    </View>
                    <View style={styles.productInfoRow}>
                      <Text style={styles.productInfoLabel}>ÁîüÁî¢Êó•Êúü:</Text>
                      <Text style={styles.productInfoValue}>{parsedProduct.formattedDate}</Text>
                    </View>
                  </View>
                ) : (
                  <View style={styles.errorContainer}>
                    <Text style={styles.errorText}>‚ùå {parsedProduct.error}</Text>
                  </View>
                )}
                {/* Âè™ÊúâÁôªÂÖ•„ÄÅË≥áÊñôÊ≠£Á¢∫‰∏îÊúâË©¶ÁÆóË°®ÊâçÈ°ØÁ§∫‰∏äÂÇ≥ÊåâÈàï */}
                {authState.isSignedIn && parsedProduct.isValid && spreadsheetId && (
                  <UploadButton onPress={handleUploadToCloud} />
                )}
                
                {/* Â¶ÇÊûúÁôªÂÖ•‰ΩÜÊ≤íÊúâË©¶ÁÆóË°®ÔºåÈ°ØÁ§∫ÊèêÁ§∫ */}
                {authState.isSignedIn && parsedProduct.isValid && !spreadsheetId && (
                  <View style={styles.noSpreadsheetWarning}>
                    <Text style={styles.noSpreadsheetWarningText}>
                      ‚ö†Ô∏è Ë´ãÂÖàÂª∫Á´ãË©¶ÁÆóË°®ÊâçËÉΩ‰∏äÂÇ≥Ë≥áÊñô
                    </Text>
                  </View>
                )}
                <TouchableOpacity
                  style={styles.copyButton}
                  onPress={() => {
                    Clipboard.setString(scannedData);
                    Alert.alert('ÊàêÂäü', 'Ê¢ùÁ¢ºÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÁ∞øÔºÅ');
                  }}
                >
                  <Text style={styles.copyButtonText}>üìã Ë§áË£ΩÊ¢ùÁ¢º</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        )}
      </ScrollView>

      {/* ÊâãÂãïËº∏ÂÖ• Modal */}
      <Modal
        visible={showResultModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowResultModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {scannedData ? 'ÊéÉÊèèÁµêÊûú' : 'ÊâãÂãïËº∏ÂÖ•Ê¢ùÁ¢º'}
            </Text>

            {!scannedData && (
              <TextInput
                style={styles.modalInput}
                placeholder="Ëº∏ÂÖ•Ê¢ùÁ¢ºÂÖßÂÆπ"
                value={manualInput}
                onChangeText={setManualInput}
                autoFocus={true}
                multiline={true}
              />
            )}

            {scannedData && (
              <View style={styles.resultDisplay}>
                <Text style={styles.resultLabel}>Ê¢ùÁ¢ºÂÖßÂÆπ:</Text>
                <Text style={styles.resultText}>{scannedData}</Text>

                {parsedProduct && (
                  <View style={styles.modalProductInfo}>
                    <Text style={styles.modalProductInfoTitle}>Áî¢ÂìÅË≥áË®ä</Text>
                    {parsedProduct.isValid ? (
                      <View style={styles.modalProductInfoTable}>
                        <View style={styles.modalProductInfoRow}>
                          <Text style={styles.modalProductInfoLabel}>Áî¢ÂìÅÈ°ûÂà•:</Text>
                          <Text style={styles.modalProductInfoValue}>{parsedProduct.categoryName} ({parsedProduct.category})</Text>
                        </View>
                        <View style={styles.modalProductInfoRow}>
                          <Text style={styles.modalProductInfoLabel}>Áî¢ÂìÅ‰ª£Á¢º:</Text>
                          <Text style={styles.modalProductInfoValue}>{parsedProduct.productCode}</Text>
                        </View>
                        <View style={styles.modalProductInfoRow}>
                          <Text style={styles.modalProductInfoLabel}>Áî¢ÂìÅÂêçÁ®±:</Text>
                          <Text style={styles.modalProductInfoValue}>{parsedProduct.productName}</Text>
                        </View>
                        <View style={styles.modalProductInfoRow}>
                          <Text style={styles.modalProductInfoLabel}>ÁîüÁî¢Êó•Êúü:</Text>
                          <Text style={styles.modalProductInfoValue}>{parsedProduct.formattedDate}</Text>
                        </View>
                      </View>
                    ) : (
                      <View style={styles.modalErrorContainer}>
                        <Text style={styles.modalErrorText}>‚ùå {parsedProduct.error}</Text>
                      </View>
                    )}

                    {/* Âè™ÊúâÁôªÂÖ•„ÄÅË≥áÊñôÊ≠£Á¢∫‰∏îÊúâË©¶ÁÆóË°®ÊâçÈ°ØÁ§∫‰∏äÂÇ≥ÊåâÈàï */}
                    {authState.isSignedIn && parsedProduct.isValid && spreadsheetId && (
                      <TouchableOpacity
                        style={styles.modalUploadButton}
                        onPress={handleUploadToCloud}
                      >
                        <Text style={styles.modalUploadButtonText}>‚òÅÔ∏è ‰∏äÂÇ≥Âà∞Èõ≤Á´Ø</Text>
                      </TouchableOpacity>
                    )}
                    
                    {/* Â¶ÇÊûúÁôªÂÖ•‰ΩÜÊ≤íÊúâË©¶ÁÆóË°®ÔºåÈ°ØÁ§∫ÊèêÁ§∫ */}
                    {authState.isSignedIn && parsedProduct.isValid && !spreadsheetId && (
                      <View style={styles.modalNoSpreadsheetWarning}>
                        <Text style={styles.modalNoSpreadsheetWarningText}>
                          ‚ö†Ô∏è Ë´ãÂÖàÂª∫Á´ãË©¶ÁÆóË°®ÊâçËÉΩ‰∏äÂÇ≥Ë≥áÊñô
                        </Text>
                      </View>
                    )}
                    
                    <TouchableOpacity
                      style={styles.modalCopyButton}
                      onPress={() => {
                        Clipboard.setString(scannedData);
                        Alert.alert('ÊàêÂäü', 'Ê¢ùÁ¢ºÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÁ∞øÔºÅ');
                      }}
                    >
                      <Text style={styles.modalCopyButtonText}>üìã Ë§áË£ΩÊ¢ùÁ¢º</Text>
                    </TouchableOpacity>
                  </View>
                )}
              </View>
            )}

            <View style={styles.modalButtons}>
              {!scannedData ? (
                <>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.modalButtonCancel]}
                    onPress={() => {
                      setShowResultModal(false);
                      setManualInput('');
                    }}
                  >
                    <Text style={styles.modalButtonCancelText}>ÂèñÊ∂à</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.modalButtonConfirm]}
                    onPress={handleManualInput}
                  >
                    <Text style={styles.modalButtonConfirmText}>Á¢∫Ë™ç</Text>
                  </TouchableOpacity>
                </>
              ) : (
                <>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.modalButtonCancel]}
                    onPress={() => {
                      setShowResultModal(false);
                      setScannedData('');
                    }}
                  >
                    <Text style={styles.modalButtonCancelText}>Ê∏ÖÈô§</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.modalButton, styles.modalButtonConfirm]}
                    onPress={handleScanAgain}
                  >
                    <Text style={styles.modalButtonConfirmText}>ÈáçÊñ∞ÊéÉÊèè</Text>
                  </TouchableOpacity>
                </>
              )}
            </View>
          </View>
        </View>
      </Modal>

      {/* Áõ∏Ê©üÊéÉÊèè Modal */}
      <Modal
        visible={showCameraModal}
        animationType="slide"
        onRequestClose={() => setShowCameraModal(false)}
      >
        <View style={styles.cameraContainer}>
          <RNCamera
            style={styles.camera}
            type={RNCamera.Constants.Type.back}
            flashMode={RNCamera.Constants.FlashMode.auto}
            onBarCodeRead={onBarcodeRead}
            captureAudio={false}
            androidCameraPermissionOptions={{
              title: 'Áõ∏Ê©üÊ¨äÈôê',
              message: 'ÈúÄË¶ÅÁõ∏Ê©üÊ¨äÈôê‰æÜÊéÉÊèèÊ¢ùÁ¢º',
              buttonPositive: 'Á¢∫ÂÆö',
              buttonNegative: 'ÂèñÊ∂à',
            }}
          />

          <View style={styles.cameraOverlay}>
            <View style={styles.cameraHeader}>
              <TouchableOpacity
                style={styles.cameraCloseButton}
                onPress={() => setShowCameraModal(false)}
              >
                <Text style={styles.cameraCloseButtonText}>‚úï</Text>
              </TouchableOpacity>
              <Text style={styles.cameraTitle}>ÊéÉÊèèÊ¢ùÁ¢º</Text>
              <View style={styles.cameraPlaceholder} />
            </View>

            <View style={styles.scanFrame}>
              {/* Â∑¶‰∏äËßí */}
              <View style={[styles.scanFrameCorner, styles.scanFrameCornerTopLeft]} />
              {/* Âè≥‰∏äËßí */}
              <View style={[styles.scanFrameCorner, styles.scanFrameCornerTopRight]} />
              {/* Â∑¶‰∏ãËßí */}
              <View style={[styles.scanFrameCorner, styles.scanFrameCornerBottomLeft]} />
              {/* Âè≥‰∏ãËßí */}
              <View style={[styles.scanFrameCorner, styles.scanFrameCornerBottomRight]} />
            </View>

            <View style={styles.cameraFooter}>
              <Text style={styles.cameraInstruction}>
                Â∞áÊ¢ùÁ¢ºÂ∞çÊ∫ñÊ°ÜÂÖßÈÄ≤Ë°åÊéÉÊèè
              </Text>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#007bff',
    fontWeight: '500',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#212529',
  },
  placeholder: {
    width: 60,
  },
  content: {
    flex: 1,
  },
  contentContainer: {
    padding: 20,
    // paddingBottom: 40, // Â§ßÂπÖÂ¢ûÂä†Â∫ïÈÉ® padding Á¢∫‰øùÊúâË∂≥Â§†ÈñìË∑ù
  },
  googleAuthSection: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#212529',
    marginBottom: 10,
  },
  sectionDescription: {
    fontSize: 16,
    color: '#6c757d',
    marginBottom: 20,
    lineHeight: 22,
  },
  signedInContainer: {
    alignItems: 'center',
    paddingTop: 20,
  },
  userInfo: {
    marginBottom: 15,
  },
  userName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#212529',
  },
  userEmail: {
    fontSize: 14,
    color: '#6c757d',
  },
  signOutButton: {
    backgroundColor: '#dc3545',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    width: '100%',
  },
  signOutButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  signInButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  signInButtonIcon: {
    fontSize: 20,
    marginRight: 10,
  },
  signInButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  cloudActions: {
    marginTop: 15,
    marginBottom: 20,
  },
  createSheetButton: {
    backgroundColor: '#4CAF50',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    width: '100%',
  },
  createSheetButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  spreadsheetInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 10,
    padding: 10,
    backgroundColor: '#e9ecef',
    borderRadius: 6,
  },
  spreadsheetLabel: {
    fontSize: 14,
    color: '#6c757d',
    fontWeight: '500',
    marginRight: 5,
  },
  spreadsheetId: {
    fontSize: 14,
    color: '#212529',
    fontWeight: 'bold',
  },
  spreadsheetName: {
    fontSize: 16,
    color: '#212529',
    fontWeight: 'bold',
    marginBottom: 5,
  },
  spreadsheetDate: {
    fontSize: 12,
    color: '#6c757d',
    marginTop: 5,
  },
  createNewSheetButton: {
    backgroundColor: '#17a2b8',
    padding: 8,
    borderRadius: 6,
    alignItems: 'center',
    marginTop: 10,
  },
  createNewSheetButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  spreadsheetInfoTouchable: {
    padding: 10,
    backgroundColor: '#e9ecef',
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  spreadsheetHint: {
    fontSize: 12,
    color: '#007bff',
    fontStyle: 'italic',
    marginTop: 5,
    textAlign: 'center',
  },
  scanSection: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 15,
  },
  scanButton: {
    flex: 1,
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  manualButton: {
    backgroundColor: '#28a745',
  },
  cameraButton: {
    backgroundColor: '#007bff',
  },
  scanButtonIcon: {
    fontSize: 20,
    marginRight: 10,
  },
  scanButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  resultSection: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  resultCard: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  resultLabel: {
    fontSize: 14,
    color: '#6c757d',
    marginBottom: 5,
  },
  resultData: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#212529',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#212529',
    marginBottom: 20,
    textAlign: 'center',
  },
  modalInput: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#dee2e6',
    borderRadius: 8,
    padding: 15,
    fontSize: 16,
    marginBottom: 20,
    minHeight: 100,
    textAlignVertical: 'top',
  },
  resultDisplay: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 8,
    marginBottom: 20,
  },
  resultText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#212529',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  modalButtonCancel: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  modalButtonConfirm: {
    backgroundColor: '#007bff',
  },
  modalButtonCancelText: {
    color: '#6c757d',
    fontSize: 16,
    fontWeight: '500',
  },
  modalButtonConfirmText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  cameraContainer: {
    flex: 1,
    backgroundColor: '#000',
  },
  camera: {
    flex: 1,
  },
  cameraOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  cameraHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    paddingTop: 60,
  },
  cameraCloseButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  cameraCloseButtonText: {
    color: '#fff',
    fontSize: 20,
    fontWeight: 'bold',
  },
  cameraTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  cameraPlaceholder: {
    width: 40,
  },
  scanFrame: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    width: 250,
    height: 250,
    marginLeft: -125,
    marginTop: -125,
  },
  scanFrameCorner: {
    position: 'absolute',
    width: 30,
    height: 30,
    borderColor: '#fff',
    borderWidth: 3,
  },
  scanFrameCornerTopLeft: {
    top: 0,
    left: 0,
    borderBottomWidth: 0,
    borderRightWidth: 0,
  },
  scanFrameCornerTopRight: {
    top: 0,
    right: 0,
    borderBottomWidth: 0,
    borderLeftWidth: 0,
  },
  scanFrameCornerBottomLeft: {
    bottom: 0,
    left: 0,
    borderTopWidth: 0,
    borderRightWidth: 0,
  },
  scanFrameCornerBottomRight: {
    bottom: 0,
    right: 0,
    borderTopWidth: 0,
    borderLeftWidth: 0,
  },
  cameraFooter: {
    position: 'absolute',
    bottom: 100,
    left: 0,
    right: 0,
    alignItems: 'center',
  },
  cameraInstruction: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 10,
    borderRadius: 8,
  },
  productInfoCard: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 8,
    marginTop: 15,
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  productInfoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#212529',
    marginBottom: 10,
  },
  productInfoTable: {
    gap: 8,
  },
  productInfoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 4,
  },
  productInfoLabel: {
    fontSize: 14,
    color: '#6c757d',
    fontWeight: '500',
  },
  productInfoValue: {
    fontSize: 14,
    color: '#212529',
    fontWeight: 'bold',
    textAlign: 'right',
    flex: 1,
    marginLeft: 10,
  },
  errorContainer: {
    backgroundColor: '#f8d7da',
    padding: 10,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#f5c6cb',
  },
  errorText: {
    color: '#721c24',
    fontSize: 14,
    textAlign: 'center',
  },
  modalProductInfo: {
    marginTop: 15,
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: '#dee2e6',
  },
  modalProductInfoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#212529',
    marginBottom: 10,
  },
  modalProductInfoTable: {
    gap: 6,
  },
  modalProductInfoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 3,
  },
  modalProductInfoLabel: {
    fontSize: 14,
    color: '#6c757d',
    fontWeight: '500',
  },
  modalProductInfoValue: {
    fontSize: 14,
    color: '#212529',
    fontWeight: 'bold',
    textAlign: 'right',
    flex: 1,
    marginLeft: 10,
  },
  modalErrorContainer: {
    backgroundColor: '#f8d7da',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#f5c6cb',
  },
  modalErrorText: {
    color: '#721c24',
    fontSize: 14,
    textAlign: 'center',
  },
  uploadButton: {
    backgroundColor: '#6c757d',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    width: '100%',
    marginTop: 10,
  },
  uploadButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  managementSection: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  managementButton: {
    backgroundColor: '#28a745',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  managementButtonIcon: {
    fontSize: 20,
    marginRight: 10,
  },
  managementButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  copyButton: {
    backgroundColor: '#17a2b8',
    padding: 10,
    borderRadius: 6,
    alignItems: 'center',
    marginTop: 10,
  },
  copyButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  modalCopyButton: {
    backgroundColor: '#17a2b8',
    padding: 8,
    borderRadius: 6,
    alignItems: 'center',
    marginTop: 10,
  },
  modalCopyButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  modalUploadButton: {
    backgroundColor: '#6c757d',
    padding: 10,
    borderRadius: 6,
    alignItems: 'center',
    marginTop: 10,
  },
  modalUploadButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  noSpreadsheetWarning: {
    backgroundColor: '#fff3cd',
    padding: 10,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#ffeaa7',
    marginTop: 10,
  },
  noSpreadsheetWarningText: {
    color: '#856404',
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '500',
  },
  modalNoSpreadsheetWarning: {
    backgroundColor: '#fff3cd',
    padding: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#ffeaa7',
    marginTop: 10,
  },
  modalNoSpreadsheetWarningText: {
    color: '#856404',
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '500',
  },
  spreadsheetActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
    marginBottom: 8,
    gap: 6,
  },
  spreadsheetActionButton: {
    backgroundColor: '#17a2b8',
    padding: 6,
    borderRadius: 4,
    alignItems: 'center',
    flex: 1,
  },
  spreadsheetActionButtonText: {
    color: '#fff',
    fontSize: 11,
    fontWeight: '600',
  },
  diagnosticButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 15,
    width: '100%',
  },
  diagnosticButton: {
    backgroundColor: '#007bff',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    width: '45%',
  },
  diagnosticButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default POSSystemScreen; 